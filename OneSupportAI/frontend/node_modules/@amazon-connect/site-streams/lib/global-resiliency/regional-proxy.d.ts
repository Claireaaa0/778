import { ChildConnectionEnabledDownstreamMessage, ErrorMessage, PublishMessage, ResponseMessage, UpstreamMessage } from "@amazon-connect/core";
import { SiteProxy } from "@amazon-connect/site";
import { AmazonConnectGRStreamsSite } from "./amazon-connect-gr-streams-site";
import { AmazonConnectGRStreamsSiteConfig } from "./amazon-connect-gr-streams-site-config";
import { GlobalResiliencyRegion } from "./global-resiliency-region";
import { GlobalResiliencyStreamsSiteMessageOrigin } from "./global-resiliency-streams-site-message-origin";
export type GlobalHandledDownstreamMessage = ResponseMessage | PublishMessage | ErrorMessage;
export type RelayToGlobalResiliencyProxy = (msg: GlobalHandledDownstreamMessage) => void;
export interface RegionalProxyParams {
    provider: AmazonConnectGRStreamsSite;
    region: GlobalResiliencyRegion;
    getUpstreamMessageOrigin: () => GlobalResiliencyStreamsSiteMessageOrigin;
    relayToGlobalResiliencyProxy: RelayToGlobalResiliencyProxy;
}
export declare class RegionalProxy extends SiteProxy<AmazonConnectGRStreamsSiteConfig> {
    private ccpIFrame;
    readonly region: GlobalResiliencyRegion;
    private unexpectedIframeWarningCount;
    private readonly getParentUpstreamMessageOrigin;
    private readonly relayToGlobalResiliencyProxy;
    constructor({ provider, region, getUpstreamMessageOrigin, relayToGlobalResiliencyProxy, }: RegionalProxyParams);
    get proxyType(): string;
    setCCPIframe(iframe: HTMLIFrameElement): void;
    protected handleMessageFromSubject(msg: ChildConnectionEnabledDownstreamMessage): void;
    protected getUpstreamMessageOrigin(): GlobalResiliencyStreamsSiteMessageOrigin;
    protected verifyEventSource(evt: MessageEvent<{
        type?: string | undefined;
    }>): boolean;
    sendOrQueueMessageToSubject(message: UpstreamMessage): void;
    protected invalidInitMessageHandler(): void;
}
//# sourceMappingURL=regional-proxy.d.ts.map