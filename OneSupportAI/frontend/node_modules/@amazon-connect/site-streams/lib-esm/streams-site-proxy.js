import { getOriginAndPath } from "@amazon-connect/core";
import { SiteProxy } from "@amazon-connect/site";
export class StreamsSiteProxy extends SiteProxy {
    constructor(provider) {
        super(provider);
        this.ccpIFrame = null;
        this.unexpectedIframeWarningCount = 0;
    }
    get proxyType() {
        return "streams-site";
    }
    setCCPIframe(iframe) {
        const isCcpIFrameSet = Boolean(this.ccpIFrame);
        this.ccpIFrame = iframe;
        this.unexpectedIframeWarningCount = 0;
        if (isCcpIFrameSet)
            this.resetConnection("CCP IFrame Updated");
    }
    getUpstreamMessageOrigin() {
        return Object.assign({ _type: "streams-site", providerId: this.provider.id }, getOriginAndPath());
    }
    verifyEventSource(evt) {
        const ccpIFrame = this.ccpIFrame;
        if (!ccpIFrame) {
            this.proxyLogger.error("CCP Iframe not provided to proxy. Unable to verify event to Connect to CCP.", {
                origin: evt.origin,
            });
            return false;
        }
        const valid = evt.source === ccpIFrame.contentWindow;
        if (!valid) {
            this.unexpectedIframeWarningCount++;
            if (this.unexpectedIframeWarningCount < 5) {
                this.proxyLogger.warn("Message came from unexpected iframe. Not a valid CCP. Will not connect", {
                    origin: evt.origin,
                    unexpectedIframeWarningCount: this.unexpectedIframeWarningCount,
                });
            }
        }
        return valid;
    }
    invalidInitMessageHandler() {
        // CCP sends messages via Streams
        // Take no action here
    }
}
//# sourceMappingURL=streams-site-proxy.js.map