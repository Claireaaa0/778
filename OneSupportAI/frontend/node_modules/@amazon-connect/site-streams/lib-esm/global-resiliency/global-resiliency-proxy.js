import { ConnectLogger, getOriginAndPath, Proxy, } from "@amazon-connect/core";
import { GlobalResiliencyRegion, } from "./global-resiliency-region";
import { RegionalProxy } from "./regional-proxy";
import { verifyRegion } from "./verify-region";
export class GlobalResiliencyProxy extends Proxy {
    constructor(provider) {
        super(provider);
        this.activeRegion = GlobalResiliencyRegion.Primary;
        this.regionProxies = {
            [GlobalResiliencyRegion.Primary]: new RegionalProxy({
                provider,
                region: GlobalResiliencyRegion.Primary,
                getUpstreamMessageOrigin: this.getUpstreamMessageOrigin.bind(this),
                relayToGlobalResiliencyProxy: this.handleMessageFromSubject.bind(this),
            }),
            [GlobalResiliencyRegion.Secondary]: new RegionalProxy({
                provider,
                region: GlobalResiliencyRegion.Secondary,
                getUpstreamMessageOrigin: this.getUpstreamMessageOrigin.bind(this),
                relayToGlobalResiliencyProxy: this.handleMessageFromSubject.bind(this),
            }),
        };
        this.proxyLogger = new ConnectLogger({
            source: "globalResiliencyProxy",
            provider,
        });
    }
    initProxy() {
        Object.values(this.regionProxies).forEach((proxy) => proxy.init());
    }
    setCCPIframe({ iframe, region }) {
        verifyRegion(region);
        this.regionProxies[region].setCCPIframe(iframe);
    }
    setActiveRegion(region) {
        verifyRegion(region);
        if (region !== this.activeRegion) {
            const previousRegionProxy = this.regionProxies[this.activeRegion];
            const currentRegionProxy = this.regionProxies[region];
            // Removes subscriptions from original engine
            this.unsubscribeAllHandlers();
            this.proxyLogger.info("Active region changed", {
                current: region,
                instanceUrl: currentRegionProxy.instanceUrl,
                previousInstanceUrl: previousRegionProxy.instanceUrl,
            });
            this.activeRegion = region;
            // Adds subscriptions to new engine
            this.restoreAllHandler();
            const currentStatus = this.status.getStatus();
            const activeRegionStatus = currentRegionProxy.connectionStatus;
            switch (activeRegionStatus) {
                case "ready":
                    this.proxyLogger.info("Active region is ready", {
                        activeRegionStatus,
                    });
                    this.status.update({
                        status: "ready",
                        connectionId: currentRegionProxy["connectionId"],
                    });
                    break;
                case "connecting":
                case "initializing":
                    if (currentStatus !== activeRegionStatus) {
                        this.status.update({ status: activeRegionStatus });
                    }
                    break;
                case "error":
                    if (currentStatus !== activeRegionStatus) {
                        this.status.update({
                            status: "error",
                            reason: "new active region in error on transition",
                            details: { region: this.activeRegion },
                        });
                    }
                    break;
            }
        }
    }
    get proxyType() {
        return "global-resiliency-proxy";
    }
    // Override the normal sendOrQueueMessageToSubject to rely on the
    // of the regional proxy
    sendOrQueueMessageToSubject(message) {
        this.regionProxies[this.activeRegion].sendOrQueueMessageToSubject(message);
    }
    addContextToLogger() {
        return { activeRegion: this.activeRegion };
    }
    // When sending a message, it goes to the sendOrQueueMessageToSubject of the
    // active region
    sendMessageToSubject(message) {
        this.regionProxies[this.activeRegion].sendOrQueueMessageToSubject(message);
    }
    getUpstreamMessageOrigin() {
        return Object.assign(Object.assign({ _type: "global-resiliency-streams-site", providerId: this.provider.id }, getOriginAndPath()), { activeRegion: this.activeRegion });
    }
    addChildIframeChannel(params) {
        this.regionProxies[this.activeRegion].addChildIframeChannel(params);
    }
    addChildComponentChannel(params) {
        this.regionProxies[this.activeRegion].addChildComponentChannel(params);
    }
    updateChildIframeChannelPort(params) {
        this.regionProxies[this.activeRegion].updateChildIframeChannelPort(params);
    }
}
//# sourceMappingURL=global-resiliency-proxy.js.map