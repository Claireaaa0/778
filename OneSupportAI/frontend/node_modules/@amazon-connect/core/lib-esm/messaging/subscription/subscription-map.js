export class SubscriptionMap {
    constructor() {
        this.simpleSubscriptions = new Map();
        this.paramSubscriptions = new Map();
    }
    add({ namespace, key, parameter: param }, value) {
        var _a, _b, _c, _d, _e;
        if (param) {
            if (!this.paramSubscriptions.has(namespace)) {
                this.paramSubscriptions.set(namespace, new Map([[key, new Map([[param, value]])]]));
                return;
            }
            if (!((_a = this.paramSubscriptions.get(namespace)) === null || _a === void 0 ? void 0 : _a.has(key))) {
                (_b = this.paramSubscriptions
                    .get(namespace)) === null || _b === void 0 ? void 0 : _b.set(key, new Map([[param, value]]));
                return;
            }
            (_d = (_c = this.paramSubscriptions.get(namespace)) === null || _c === void 0 ? void 0 : _c.get(key)) === null || _d === void 0 ? void 0 : _d.set(param, value);
        }
        else {
            if (!this.simpleSubscriptions.has(namespace)) {
                this.simpleSubscriptions.set(namespace, new Map([[key, value]]));
                return;
            }
            else
                (_e = this.simpleSubscriptions.get(namespace)) === null || _e === void 0 ? void 0 : _e.set(key, value);
        }
    }
    delete({ namespace, key, parameter: param }) {
        var _a, _b, _c, _d;
        if (param) {
            if ((_b = (_a = this.paramSubscriptions.get(namespace)) === null || _a === void 0 ? void 0 : _a.get(key)) === null || _b === void 0 ? void 0 : _b.delete(param)) {
                if (this.paramSubscriptions.get(namespace).get(key).size < 1) {
                    (_c = this.paramSubscriptions.get(namespace)) === null || _c === void 0 ? void 0 : _c.delete(key);
                    if (this.paramSubscriptions.get(namespace).size < 1) {
                        this.paramSubscriptions.delete(namespace);
                    }
                }
            }
        }
        else {
            if ((_d = this.simpleSubscriptions.get(namespace)) === null || _d === void 0 ? void 0 : _d.delete(key)) {
                if (this.simpleSubscriptions.get(namespace).size < 1) {
                    this.simpleSubscriptions.delete(namespace);
                }
            }
        }
    }
    get({ namespace, key, parameter: param }) {
        var _a, _b, _c;
        if (!param) {
            return (_a = this.simpleSubscriptions.get(namespace)) === null || _a === void 0 ? void 0 : _a.get(key);
        }
        else {
            return (_c = (_b = this.paramSubscriptions.get(namespace)) === null || _b === void 0 ? void 0 : _b.get(key)) === null || _c === void 0 ? void 0 : _c.get(param);
        }
    }
    getOrAdd(topic, addFactory) {
        let value = this.get(topic);
        if (!value) {
            value = addFactory();
            this.add(topic, value);
        }
        return value;
    }
    addOrUpdate(topic, addFactory, updateAction) {
        let value = this.get(topic);
        if (value) {
            value = updateAction(value);
        }
        else {
            value = addFactory();
        }
        this.add(topic, value);
        return value;
    }
    getAllSubscriptions() {
        const noParam = Array.from(this.simpleSubscriptions.keys()).flatMap((namespace) => Array.from(this.simpleSubscriptions.get(namespace).keys()).flatMap((key) => ({
            namespace,
            key,
        })));
        const withParam = Array.from(this.paramSubscriptions.keys()).flatMap((namespace) => Array.from(this.paramSubscriptions.get(namespace).keys()).flatMap((key) => Array.from(this.paramSubscriptions.get(namespace).get(key).keys()).flatMap((parameter) => ({
            namespace,
            key,
            parameter,
        }))));
        return [...noParam, ...withParam];
    }
}
//# sourceMappingURL=subscription-map.js.map