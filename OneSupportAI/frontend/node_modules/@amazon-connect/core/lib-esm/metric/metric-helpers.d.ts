import { MetricMessage, UpstreamMessageOrigin } from "../messaging";
import { ProxyMetricData } from "./proxy-metric-data";
export declare const MAX_METRIC_DIMENSIONS = 30;
/**
 * Check if the the sum of the length of dimensions and optional dimentions is exceeding maximum dimension length acceptable by back-end
 * @param {Record<string, string>} dimensions - The dimensions of the duration metric with keys and values
 * @param {Record<string, string>} optionalDimensions -The optional dimensions of the duration metric with keys and values
 */
export declare function checkDimensionLength(dimensions: Record<string, string>, optionalDimensions?: Record<string, string>): void;
/**
 * Transform the metric message into the format acceptable by back-end
 * @param {MetricData} metricData - The metric data
 * @param {string} timestamp - The timestamp of the metric
 * @param {string} namespace - The namespace of the metric
 * @param {UpstreamMessageOrigin} messageOrigin - The origin of the metric message
 * @return {MetricMessage} - Return a MetricMessage object
 */
export declare function createMetricMessage({ metricData, time, namespace }: ProxyMetricData, messageOrigin: UpstreamMessageOrigin): MetricMessage;
//# sourceMappingURL=metric-helpers.d.ts.map