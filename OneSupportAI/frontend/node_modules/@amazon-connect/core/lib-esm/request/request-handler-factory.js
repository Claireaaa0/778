import { ConnectError } from "../error";
import { formatClientTimeoutError } from "./client-timeout-error";
const DEFAULT_TIMEOUT_MS = 30 * 1000;
export function createRequestHandler(request, onStart, onTimeout, timeoutMs) {
    const adjustedTimeoutMs = Math.max(1, timeoutMs !== null && timeoutMs !== void 0 ? timeoutMs : DEFAULT_TIMEOUT_MS);
    return new Promise((resolve, reject) => {
        let isTimedOut = false;
        const timeout = setTimeout(() => {
            onTimeout({ timeoutMs: adjustedTimeoutMs, request });
            // eslint-disable-next-line @typescript-eslint/prefer-promise-reject-errors
            reject(formatClientTimeoutError(request, adjustedTimeoutMs));
            isTimedOut = true;
        }, adjustedTimeoutMs);
        const handler = (msg) => {
            clearTimeout(timeout);
            if (!isTimedOut) {
                if (msg.isError) {
                    reject(new ConnectError(msg));
                }
                else {
                    resolve(msg.data);
                }
            }
        };
        onStart(handler);
    });
}
//# sourceMappingURL=request-handler-factory.js.map