import { ConnectLogger } from "../logging";
import { createRequestHandler, } from "./request-handler-factory";
export class RequestManager {
    constructor(provider) {
        this.requestMap = new Map();
        this.logger = new ConnectLogger({
            provider,
            source: "core.requestManager",
        });
    }
    processRequest(request) {
        const { requestId } = request;
        return createRequestHandler(request, (handler) => this.requestMap.set(requestId, handler), ({ request, timeoutMs }) => this.handleTimeout(request, timeoutMs));
    }
    processResponse(response) {
        const { requestId } = response;
        const handler = this.requestMap.get(requestId);
        if (!handler) {
            // The proxy is implemented such that this should never happen
            this.logger.error("Returned a response message with no handler", {
                message: response,
            });
            return;
        }
        handler(response);
        this.requestMap.delete(requestId);
    }
    handleTimeout(request, timeoutMs) {
        const { requestId, namespace, command } = request;
        this.requestMap.delete(requestId);
        this.logger.error("Client request timeout", {
            requestId,
            namespace,
            command,
            timeoutMs,
        });
    }
}
//# sourceMappingURL=request-manager.js.map