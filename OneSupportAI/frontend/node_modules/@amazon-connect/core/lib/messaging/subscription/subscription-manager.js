"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SubscriptionManager = void 0;
const subscription_handler_id_map_1 = require("./subscription-handler-id-map");
const subscription_map_1 = require("./subscription-map");
class SubscriptionManager {
    constructor() {
        this.subscriptions = new subscription_map_1.SubscriptionMap();
    }
    add(topic, handler) {
        return this.subscriptions
            .getOrAdd(topic, () => new subscription_handler_id_map_1.SubscriptionHandlerIdMap())
            .add(handler);
    }
    get(topic) {
        var _a, _b;
        return (_b = (_a = this.subscriptions.get(topic)) === null || _a === void 0 ? void 0 : _a.get()) !== null && _b !== void 0 ? _b : [];
    }
    getById(topic, handlerId) {
        var _a, _b;
        return (_b = (_a = this.subscriptions.get(topic)) === null || _a === void 0 ? void 0 : _a.getHandlerById(handlerId)) !== null && _b !== void 0 ? _b : null;
    }
    delete(topic, handler) {
        var _a, _b;
        if ((_b = (_a = this.subscriptions.get(topic)) === null || _a === void 0 ? void 0 : _a.delete(handler).isEmpty) !== null && _b !== void 0 ? _b : false) {
            this.subscriptions.delete(topic);
        }
    }
    size(topic) {
        var _a, _b;
        return (_b = (_a = this.subscriptions.get(topic)) === null || _a === void 0 ? void 0 : _a.size()) !== null && _b !== void 0 ? _b : 0;
    }
    isEmpty(topic) {
        return this.size(topic) === 0;
    }
    getAllSubscriptions() {
        return this.subscriptions.getAllSubscriptions();
    }
    getAllSubscriptionHandlerIds() {
        return this.subscriptions
            .getAllSubscriptions()
            .reduce((acc, topic) => acc.concat(this.get(topic).map(({ handlerId }) => ({
            topic,
            handlerId,
        }))), []);
    }
}
exports.SubscriptionManager = SubscriptionManager;
//# sourceMappingURL=subscription-manager.js.map