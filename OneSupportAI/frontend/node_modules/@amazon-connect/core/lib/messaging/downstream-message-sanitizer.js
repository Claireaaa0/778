"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sanitizeDownstreamMessage = sanitizeDownstreamMessage;
function sanitizeDownstreamMessage(message) {
    try {
        switch (message.type) {
            case "acknowledge":
            case "error":
            case "childConnectionClose":
                return message;
            case "childDownstreamMessage":
                return Object.assign(Object.assign({}, message), { message: sanitizeDownstreamMessage(message.message) });
            case "publish": {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                const { data } = message, other = __rest(message, ["data"]);
                return Object.assign({}, other);
            }
            case "response": {
                // eslint-disable-next-line @typescript-eslint/no-unused-vars
                if (message.isError)
                    return Object.assign(Object.assign({}, message), { details: { command: message.details.command } });
                else {
                    // eslint-disable-next-line @typescript-eslint/no-unused-vars
                    const { data } = message, other = __rest(message, ["data"]);
                    return Object.assign({}, other);
                }
            }
            default:
                return message;
        }
    }
    catch (error) {
        return {
            messageDetails: "error when sanitizing downstream message",
            message,
            error,
        };
    }
}
//# sourceMappingURL=downstream-message-sanitizer.js.map