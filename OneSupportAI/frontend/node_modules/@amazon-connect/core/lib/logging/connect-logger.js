"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConnectLogger = void 0;
const provider_1 = require("../provider");
const utility_1 = require("../utility");
const log_data_console_writer_1 = require("./log-data-console-writer");
const log_data_transformer_1 = require("./log-data-transformer");
const log_level_1 = require("./log-level");
class ConnectLogger {
    constructor(param) {
        this._proxy = null;
        this._logToConsoleLevel = null;
        this.loggerId = (0, utility_1.generateStringId)(8);
        if (typeof param === "string") {
            this.source = param;
            this.dataTransformer = new log_data_transformer_1.LogDataTransformer(undefined);
        }
        else {
            this.source = param.source;
            if (param.provider && typeof param.provider === "function")
                this.providerFactory = param.provider;
            else
                this.provider = param.provider;
            this.dataTransformer = new log_data_transformer_1.LogDataTransformer(param.mixin);
            this.logOptions = param.options;
        }
    }
    trace(message, data, options) {
        this.log(log_level_1.LogLevel.trace, message, data, options);
    }
    debug(message, data, options) {
        this.log(log_level_1.LogLevel.debug, message, data, options);
    }
    info(message, data, options) {
        this.log(log_level_1.LogLevel.info, message, data, options);
    }
    warn(message, data, options) {
        this.log(log_level_1.LogLevel.warn, message, data, options);
    }
    error(message, data, options) {
        this.log(log_level_1.LogLevel.error, message, data, options);
    }
    log(level, message, data, options) {
        const transformedData = this.dataTransformer.getTransformedData(level, data);
        if (!this.ignoreRemote(options)) {
            this.getProxy().log({
                level,
                source: this.source,
                loggerId: this.loggerId,
                message,
                data: transformedData,
            });
        }
        if (this.applyDuplicateMessageToConsole(level, options)) {
            (0, log_data_console_writer_1.logToConsole)(level, message, transformedData);
        }
    }
    getProvider() {
        if (!this.provider) {
            this.provider = this.providerFactory
                ? this.providerFactory()
                : (0, provider_1.getGlobalProvider)();
        }
        return this.provider;
    }
    getProxy() {
        if (!this._proxy) {
            this._proxy = this.getProvider().getProxy();
        }
        return this._proxy;
    }
    applyDuplicateMessageToConsole(level, options) {
        return ((options === null || options === void 0 ? void 0 : options.duplicateMessageToConsole) || this.getLogConsoleLevel() <= level);
    }
    getLogConsoleLevel() {
        var _a, _b, _c, _d;
        if (!this._logToConsoleLevel) {
            this._logToConsoleLevel = ((_a = this.logOptions) === null || _a === void 0 ? void 0 : _a.minLogToConsoleLevelOverride)
                ? this.logOptions.minLogToConsoleLevelOverride
                : ((_d = (_c = (_b = this.getProvider().config) === null || _b === void 0 ? void 0 : _b.logging) === null || _c === void 0 ? void 0 : _c.minLogToConsoleLevel) !== null && _d !== void 0 ? _d : log_level_1.LogLevel.error);
        }
        return this._logToConsoleLevel;
    }
    ignoreRemote(options) {
        var _a, _b, _c;
        return (((_b = (_a = this.logOptions) === null || _a === void 0 ? void 0 : _a.remoteIgnore) !== null && _b !== void 0 ? _b : false) ||
            ((_c = options === null || options === void 0 ? void 0 : options.remoteIgnore) !== null && _c !== void 0 ? _c : false));
    }
}
exports.ConnectLogger = ConnectLogger;
//# sourceMappingURL=connect-logger.js.map