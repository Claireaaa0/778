import { ConnectLogger } from "../logging";
import { SubscriptionHandler, SubscriptionHandlerData } from "../messaging/subscription";
import { AmazonConnectProvider } from "../provider";
export declare abstract class SubscriptionHandlerRelay<TInternalHandler extends SubscriptionHandler<TInternalEvent>, TExternalHandler extends SubscriptionHandler<TExternalEvent>, TInternalEvent extends SubscriptionHandlerData = TInternalHandler extends SubscriptionHandler<infer U> ? U : never, TExternalEvent extends SubscriptionHandlerData = TExternalHandler extends SubscriptionHandler<infer U> ? U : never> {
    private handlersMap;
    protected readonly logger: ConnectLogger;
    protected readonly provider: AmazonConnectProvider;
    private proxy;
    protected abstract readonly namespace: string;
    protected abstract readonly topicKey: string;
    constructor(provider: AmazonConnectProvider);
    protected get supportsParameter(): boolean;
    protected abstract translate(internalEvent: TInternalEvent): Promise<TExternalEvent>;
    on(handler: TExternalHandler, parameter?: string): void;
    off(handler: TExternalHandler, parameter?: string): void;
    protected skipRelay(event: TInternalEvent): boolean;
    destroy(): void;
    private getParameterInternalHandlerMap;
    private getProxy;
}
//# sourceMappingURL=subscription-handler-relay.d.ts.map