"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HealthCheckManager = void 0;
const logging_1 = require("../../logging");
const utility_1 = require("../../utility");
class HealthCheckManager {
    constructor({ provider, sendHealthCheck, getUpstreamMessageOrigin, }) {
        this.connectionId = null;
        this.healthCheckInterval = null;
        this.healthCheckTimeout = null;
        this.sendHealthCheck = sendHealthCheck;
        this.getUpstreamMessageOrigin = getUpstreamMessageOrigin;
        this.sendHealthCheckInterval = null;
        this.lastHealthCheckResponse = null;
        this._status = "unknown";
        this.logger = new logging_1.ConnectLogger({
            source: "core.proxy.health-check",
            provider: provider,
            mixin: () => ({
                connectionId: this.connectionId,
            }),
        });
        this.events = new utility_1.AsyncEventEmitter({
            provider,
            loggerKey: "core.proxy.health-check",
        });
    }
    get status() {
        return this._status;
    }
    get isRunning() {
        return this.sendHealthCheckInterval !== null;
    }
    get lastCheckCounter() {
        var _a, _b;
        return (_b = (_a = this.lastHealthCheckResponse) === null || _a === void 0 ? void 0 : _a.counter) !== null && _b !== void 0 ? _b : null;
    }
    get lastCheckTime() {
        var _a, _b;
        return (_b = (_a = this.lastHealthCheckResponse) === null || _a === void 0 ? void 0 : _a.time) !== null && _b !== void 0 ? _b : null;
    }
    start({ healthCheckInterval: interval, connectionId, }) {
        this.connectionId = connectionId;
        this.healthCheckInterval = interval;
        this.clearInterval();
        if (interval <= 0) {
            this.logger.debug("Health check disabled");
            return;
        }
        if (interval < 1000) {
            this.logger.error("Health check interval is less than 1 second. Not running", { interval });
            return;
        }
        this.sendHealthCheckMessage();
        this.sendHealthCheckInterval = setInterval(() => this.sendHealthCheckMessage(), interval);
        this.startTimeout();
    }
    stop() {
        this.clearInterval();
        this.clearTimeout();
    }
    handleResponse(message) {
        this.setHealthy({
            time: message.time,
            counter: message.counter,
        });
    }
    sendHealthCheckMessage() {
        this.sendHealthCheck({
            type: "healthCheck",
            messageOrigin: this.getUpstreamMessageOrigin(),
        });
    }
    startTimeout() {
        if (!this.healthCheckInterval) {
            this.logger.error("Health check interval not set. Cannot start timeout");
            return;
        }
        // Cancels a preexisting timeout to be replaced with new timeout
        this.clearTimeout();
        this.healthCheckTimeout = setTimeout(() => {
            this.setUnhealthy();
        }, this.healthCheckInterval * 3);
    }
    clearInterval() {
        if (this.sendHealthCheckInterval) {
            clearInterval(this.sendHealthCheckInterval);
            this.sendHealthCheckInterval = null;
        }
    }
    clearTimeout() {
        if (this.healthCheckTimeout) {
            clearTimeout(this.healthCheckTimeout);
            this.healthCheckTimeout = null;
        }
    }
    setUnhealthy() {
        if (this._status !== "unhealthy") {
            const previousStatus = this._status;
            this.logger.info("Connection unhealthy", {
                previousStatus,
            });
            this._status = "unhealthy";
            this.emitStatusChanged("unhealthy", previousStatus);
        }
    }
    setHealthy(result) {
        this.lastHealthCheckResponse = Object.assign({}, result);
        if (this._status !== "healthy") {
            const previousStatus = this._status;
            this.logger.debug("Connection healthy", {
                previousStatus,
            });
            this._status = "healthy";
            this.emitStatusChanged("healthy", previousStatus);
        }
        this.startTimeout();
    }
    emitStatusChanged(status, previousStatus) {
        var _a, _b, _c, _d;
        void this.events.emit(HealthCheckManager.statusChangedKey, {
            status,
            previousStatus,
            lastCheckTime: (_b = (_a = this.lastHealthCheckResponse) === null || _a === void 0 ? void 0 : _a.time) !== null && _b !== void 0 ? _b : null,
            lastCheckCounter: (_d = (_c = this.lastHealthCheckResponse) === null || _c === void 0 ? void 0 : _c.counter) !== null && _d !== void 0 ? _d : null,
        });
    }
    onStatusChanged(handler) {
        this.events.on(HealthCheckManager.statusChangedKey, handler);
    }
    offStatusChanged(handler) {
        this.events.off(HealthCheckManager.statusChangedKey, handler);
    }
}
exports.HealthCheckManager = HealthCheckManager;
HealthCheckManager.statusChangedKey = "statusChanged";
//# sourceMappingURL=health-check-manager.js.map