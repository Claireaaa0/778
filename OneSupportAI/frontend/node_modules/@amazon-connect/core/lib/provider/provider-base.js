"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmazonConnectProviderBase = void 0;
const error_1 = require("../error");
const logging_1 = require("../logging");
const utility_1 = require("../utility");
const global_provider_1 = require("./global-provider");
class AmazonConnectProviderBase {
    constructor({ config, proxyFactory }) {
        this._id = (0, utility_1.generateUUID)();
        if (!proxyFactory) {
            throw new Error("Attempted to get Proxy before setting up factory");
        }
        if (!config) {
            throw new Error("Failed to include config");
        }
        this.proxyFactory = proxyFactory;
        this._config = config;
    }
    get id() {
        return this._id;
    }
    getProxy() {
        if (!this.proxy) {
            this.proxy = this.proxyFactory(this);
            this.proxy.init();
        }
        return this.proxy;
    }
    get config() {
        return Object.assign({}, this._config);
    }
    onError(handler) {
        this.getProxy().onError(handler);
    }
    offError(handler) {
        this.getProxy().offError(handler);
    }
    static initializeProvider(provider) {
        if (this.isInitialized) {
            const msg = "Attempted to initialize provider more than one time.";
            const details = {};
            try {
                // Attempts to get the existing provider for logging
                const existingProvider = (0, global_provider_1.getGlobalProvider)();
                const logger = new logging_1.ConnectLogger({
                    source: "core.amazonConnectProvider.init",
                    provider: existingProvider,
                });
                logger.error(msg);
            }
            catch (e) {
                // In the event of a error when logging or attempting
                // to get provider when logging, capture the message
                // in the error being thrown
                details.loggingError = e === null || e === void 0 ? void 0 : e.message;
            }
            throw new error_1.ConnectError({
                errorKey: "attemptInitializeMultipleProviders",
                reason: msg,
                details,
            });
        }
        (0, global_provider_1.setGlobalProvider)(provider);
        this.isInitialized = true;
        // Getting the proxy sets up the connection with subject
        provider.getProxy();
        return provider;
    }
}
exports.AmazonConnectProviderBase = AmazonConnectProviderBase;
AmazonConnectProviderBase.isInitialized = false;
//# sourceMappingURL=provider-base.js.map