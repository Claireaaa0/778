import { AmazonConnectConfig } from "../amazon-connect-config";
import { AmazonConnectErrorHandler } from "../amazon-connect-error";
import { Proxy, ProxyFactory } from "../proxy";
import { AmazonConnectProvider } from "./provider";
export type AmazonConnectProviderParams<TConfig extends AmazonConnectConfig> = {
    config: TConfig;
    proxyFactory: ProxyFactory<AmazonConnectProvider<TConfig>>;
};
export declare class AmazonConnectProviderBase<TConfig extends AmazonConnectConfig = AmazonConnectConfig> implements AmazonConnectProvider<TConfig> {
    private readonly _id;
    private readonly proxyFactory;
    private readonly _config;
    private proxy;
    constructor({ config, proxyFactory }: AmazonConnectProviderParams<TConfig>);
    get id(): string;
    getProxy(): Proxy;
    get config(): Readonly<TConfig>;
    onError(handler: AmazonConnectErrorHandler): void;
    offError(handler: AmazonConnectErrorHandler): void;
    protected static isInitialized: boolean;
    protected static initializeProvider<TProvider extends AmazonConnectProviderBase>(provider: TProvider): TProvider;
}
//# sourceMappingURL=provider-base.d.ts.map