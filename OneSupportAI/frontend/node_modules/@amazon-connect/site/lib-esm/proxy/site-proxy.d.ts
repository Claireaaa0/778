import { AmazonConnectConfig, AmazonConnectProvider, ConnectLogger, Proxy, UpstreamMessage } from "@amazon-connect/core";
export declare abstract class SiteProxy<T extends AmazonConnectConfig> extends Proxy<T> {
    protected readonly proxyLogger: ConnectLogger;
    protected messagePort: MessagePort | undefined;
    private readonly postMessageHandler;
    readonly instanceUrl: string;
    /**
     * Creates a new SiteProxy instance.
     *
     * @overload
     * @param provider - Provider with config containing instanceUrl
     *
     * @overload
     * @param provider - Provider with base config
     * @param instanceUrl - The Amazon Connect instance URL
     *
     * @example
     * ```typescript
     * // First overload: instanceUrl in config
     * const provider1 = new AmazonConnectProvider({
     *   instanceUrl: "https://myinstance.awsapps.com/connect"
     * });
     * const proxy1 = new SiteProxy(provider1);
     *
     * // Second overload: instanceUrl as separate parameter
     * const provider2 = new AmazonConnectProvider({});
     * const proxy2 = new SiteProxy(provider2, "https://myinstance.awsapps.com/connect");
     * ```
     */
    constructor(provider: AmazonConnectProvider<T & {
        instanceUrl: string;
    }>);
    constructor(provider: AmazonConnectProvider<T>, instanceUrl: string);
    protected initProxy(): void;
    protected resetConnection(reason: string): void;
    protected sendMessageToSubject(message: UpstreamMessage): void;
    protected addContextToLogger(): Record<string, unknown>;
    protected abstract verifyEventSource(evt: MessageEvent<{
        type?: string;
    }>): boolean;
    protected abstract invalidInitMessageHandler(data: {
        type?: string;
    }): void;
    private listenForInitialMessage;
    private verifyOrigin;
}
//# sourceMappingURL=site-proxy.d.ts.map